{"version":3,"sources":["components/Table/Table.js","components/Input/Input.js","components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["props","tableHeader","products","Object","keys","map","key","index","tableRows","product","id","name","price","quantity","className","length","style","margin","type","onChange","changeHandler","placeholder","App","state","data","filteredData","searchText","isLoading","error","fetch","then","resonse","json","setState","catch","event","this","target","value","filter","el","toLowerCase","includes","content","Fragment","Input","Table","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4NAEe,WAAAA,GAEb,IAEMC,GAFeD,EAAME,SAAS,GAAKC,OAAOC,KAAKJ,EAAME,SAAS,IAAM,IAEzCG,KAAI,SAACC,EAAKC,GACzC,OAAO,wBAAID,IAAKC,GAAQD,MAGpBE,EAAYR,EAAME,SAASG,KAAI,SAAAI,GAAY,IACvCC,EAA8BD,EAA9BC,GAAIC,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAEzB,OACE,wBAAIC,UAAU,cAAcR,IAAKI,GAC/B,4BAAKA,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,OAMX,OACE,2BAAOC,UAAU,sCACf,+BACE,wBAAIA,UAAU,8BAA8Bb,GAC3CO,EAAUO,OAASP,EAAY,wBAAIM,UAAU,eAAc,8CC1BrD,WAAAd,GAAK,OAClB,yBAAKc,UAAU,yBAAyBE,MAAO,CAAEC,OAAQ,QACvD,2BAAOC,KAAK,OAAOC,SAAUnB,EAAMoB,cAAeN,UAAU,sBAAsBO,YAAY,gBCDnF,G,MAAA,kBACb,yBAAKP,UAAU,aCuDFQ,G,iNAnDbC,MAAQ,CACNC,KAAM,GACNC,aAAc,GACdC,WAAY,GACZC,WAAW,EACXC,MAAO,I,mFAGY,IAAD,OAClBC,MAAM,mDACHC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAN,GAAI,OAAI,EAAKS,SAAS,CAAEN,WAAW,EAAOF,aAAcD,EAAMA,YACnEU,OAAM,SAAAN,GAAK,OAAI,EAAKK,SAAS,CAACL,e,oCAGrBO,GACZ,IAAIjC,EAAWkC,KAAKb,MAAMC,KAEC,KAAvBW,EAAME,OAAOC,QACfpC,EAAWkC,KAAKb,MAAMC,KAAKe,QAAO,SAAAC,GAChC,IAAMd,EAAaS,EAAME,OAAOC,MAAMG,cAGtC,OAFaD,EAAG7B,KAAK8B,cAETC,SAAShB,OAGzBU,KAAKH,SAAS,CAAER,aAAcvB,M,+BAGtB,IAAD,OACDyC,EACJ,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAD,CAAOzB,cAAe,SAACe,GAAD,OAAW,EAAKf,cAAce,MACpD,kBAACW,EAAD,CAAO5C,SAAUkC,KAAKb,MAAME,gBAKhC,OACE,yBAAKX,UAAU,mBAEXsB,KAAKb,MAAMK,MAAQ,+CACnBQ,KAAKb,MAAMI,UACP,kBAAC,EAAD,MACAgB,O,GA9CII,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.9ece235a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default props => {\r\n\r\n  const headerTitles = props.products[0] ? Object.keys(props.products[0]) : [];\r\n\r\n  const tableHeader = headerTitles.map((key, index) => {\r\n    return <th key={index}>{key}</th>\r\n  });\r\n\r\n  const tableRows = props.products.map(product => {\r\n    const { id, name, price, quantity } = product;\r\n\r\n    return (\r\n      <tr className=\"text-center\" key={id}>\r\n        <td>{id}</td>\r\n        <td>{name}</td>\r\n        <td>{price}</td>\r\n        <td>{quantity}</td>\r\n      </tr>\r\n    )\r\n  });\r\n\r\n\r\n  return (\r\n    <table className=\"table table-striped table-bordered\">\r\n      <tbody>\r\n        <tr className=\"text-center text-uppercase\">{tableHeader}</tr>\r\n        {tableRows.length ? tableRows : <tr className=\"text-center\"><td>No results</td></tr>}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nexport default props => (\r\n  <div className=\"form-group float-right\" style={{ margin: \"5px\" }}>\r\n    <input type=\"text\" onChange={props.changeHandler} className=\"search form-control\" placeholder=\"Search...\" />\r\n  </div >\r\n)\r\n","import React from 'react';\r\nimport \"./Loader.css\";\r\n\r\nexport default () => (\r\n  <div className=\"loader\" />\r\n);","import React, { Component } from 'react';\r\nimport Table from './components/Table/Table';\r\nimport Input from './components/Input/Input';\r\nimport Loader from './components/Loader/Loader';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    data: [],\r\n    filteredData: [],\r\n    searchText: '',\r\n    isLoading: true,\r\n    error: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://prod-test.herokuapp.com/api/getProducts')\r\n      .then(resonse => resonse.json())\r\n      .then(data => this.setState({ isLoading: false, filteredData: data, data }))\r\n      .catch(error => this.setState({error}))\r\n  }\r\n\r\n  changeHandler(event) {\r\n    let products = this.state.data;\r\n\r\n    if (event.target.value !== '') {\r\n      products = this.state.data.filter(el => {\r\n        const searchText = event.target.value.toLowerCase();\r\n        const name = el.name.toLowerCase();\r\n\r\n        return name.includes(searchText);\r\n      });\r\n    }\r\n    this.setState({ filteredData: products });\r\n  }\r\n\r\n  render() {\r\n    const content = (\r\n      <React.Fragment>\r\n        <Input changeHandler={(event) => this.changeHandler(event)} />\r\n        <Table products={this.state.filteredData} />\r\n      </React.Fragment>\r\n    );\r\n\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        {\r\n          this.state.error ? <h1>Try again later</h1> :\r\n          this.state.isLoading\r\n            ? <Loader />\r\n            : content\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}